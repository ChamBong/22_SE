#pragma once

#include "conf.h"



/* * * * * * * * * * * * * * * *
 *  Boundary Class Prototypes  *
 *                             *
 * * * * * * * * * * * * * * * */

/*
 *  Class Name   : UI
 *  Class Type   : Boundary
 *  Relationship : Base Class of All Boundary Classes
 *  Description  : Abstract Base Class
 *  Author       : ¿Ã∫¥«Â
 */

class UI
{
public:
    string getInput(ifstream &inputFile);
    void setOutput(ofstream &outputFile, string output);
};

/*
 *  Class Name   : SignUpUI
 *  Class Type   : Boundary
 *  Relationship : SignUpUI IS-A UI
 *  Description  : Singleton Class∑Œ ±∏«ˆµ», SignUp Use Caseø°º≠ ¿‘√‚∑¬¿ª √≥∏Æ«œ¥¬ ≈¨∑°Ω∫
 *  Author       : ¿Ã∫¥«Â
 */

class SignUpUI : public UI
{
public:
    static SignUpUI* getUiInstance();

private:
    SignUpUI();
    ~SignUpUI();

private:
    static SignUpUI* signUpUI;
};

/*
 *  Class Name   : DropOutUI
 *  Class Type   : Boundary
 *  Relationship : DropOutUI IS-A UI
 *  Description  :
 *  Author       : ¿Ã∫¥«Â
 */

class DropOutUI : public UI
{
public:
    static DropOutUI* getUiInstance();

private:
    DropOutUI();
    ~DropOutUI();

private:
    static DropOutUI* dropOutUI;
};

/*
 *  Class Name   : LoginUI
 *  Class Type   : Boundary
 *  Relationship : LoginUI IS-A UI
 *  Description  :
 *  Author       : ¿Ã∫¥«Â
 */

class LoginUI : public UI
{
public:
    static LoginUI* getUiInstance();
    
private:
    LoginUI();
    ~LoginUI();

private:
    static LoginUI* loginUI;
};

/*
 *  Class Name   : LogoutUI
 *  Class Type   : Boundary
 *  Relationship : LogoutUI IS-A UI
 *  Description  :
 *  Author       : ¿Ã∫¥«Â
 */

class LogoutUI : public UI
{
public:
    static LogoutUI* getUiInstance();
    
private:
    LogoutUI();
    ~LogoutUI();

private:
    static LogoutUI* logoutUI;
};

/*
 *  Class Name   : EnrollUI
 *  Class Type   : Boundary
 *  Relationship : EnrollUI IS-A UI
 *  Description  :
 *  Author       : ¿Ã∫¥«Â
 */

class EnrollUI : public UI
{
public:
    static EnrollUI* getUiInstance();

private:
    EnrollUI();
    ~EnrollUI();

private:
    static EnrollUI* enrollUI;
};

/*
 *  Class Name   : ListOnSaleUI
 *  Class Type   : Boundary
 *  Relationship : ListOnSaleUI IS-A UI
 *  Description  :
 *  Author       : ¿Ã∫¥«Â
 */

class ListOnSaleUI : public UI
{
public:
    static ListOnSaleUI* getUiInstance();
    
private:
    ListOnSaleUI();
    ~ListOnSaleUI();

private:
    static ListOnSaleUI* listOnSaleUI;
};

/*
 *  Class Name   : ListSoldOutUI
 *  Class Type   : Boundary
 *  Relationship : ListSoldOutUI IS-A UI
 *  Description  :
 *  Author       : ¿Ã∫¥«Â
 */

class ListSoldOutUI : public UI
{
public:
    static ListSoldOutUI* getUiInstance();
    
private:
    ListSoldOutUI();
    ~ListSoldOutUI();

private:
    static ListSoldOutUI* listSoldOutUI;
};

/*
 *  Class Name   : SearchOnSaleUI
 *  Class Type   : Boundary
 *  Relationship : SearchOnSaleUI IS-A UI
 *  Description  :
 *  Author       : ¿Ã∫¥«Â
 */

class SearchOnSaleUI : public UI
{
public:
    static SearchOnSaleUI* getUiInstance();
    
private:
    SearchOnSaleUI();
    ~SearchOnSaleUI();

private:
    static SearchOnSaleUI* searchOnSaleUI;
};

/*
 *  Class Name   : PurchaseUI
 *  Class Type   : Boundary
 *  Relationship : PurchaseUI IS-A UI
 *  Description  :
 *  Author       : ¿Ã∫¥«Â
 */

class PurchaseUI : public UI
{
public:
    static PurchaseUI* getUiInstance();
    
private:
    PurchaseUI();
    ~PurchaseUI();

private:
    static PurchaseUI* purchaseUI;
};

/*
 *  Class Name   : ListPurchaseHistoryUI
 *  Class Type   : Boundary
 *  Relationship : ListPurchaseHistoryUI IS-A UI
 *  Description  :
 *  Author       : ¿Ã∫¥«Â
 */

class ListPurchaseHistoryUI : public UI
{
public:
    static ListPurchaseHistoryUI* getUiInstance();
    
private:
    ListPurchaseHistoryUI();
    ~ListPurchaseHistoryUI();

private:
    static ListPurchaseHistoryUI* listPurchaseHistoryUI;
};

/*
 *  Class Name   : RateUI
 *  Class Type   : Boundary
 *  Relationship : RateUI IS-A UI
 *  Description  :
 *  Author       : ¿Ã∫¥«Â
 */

class RateUI : public UI
{
public:
    static RateUI* getUiInstance();
    
private:
    RateUI();
    ~RateUI();

private:
    static RateUI* rateUI;
};

/*
 *  Class Name   : CollectStatisticsUI
 *  Class Type   : Boundary
 *  Relationship : CollectStatisticsUI IS-A UI
 *  Description  : 
 *  Author       : ¿Ã∫¥«Â
 */

class CollectStatisticsUI : public UI
{
public:
    static CollectStatisticsUI* getUiInstance();
    
private:
    CollectStatisticsUI();
    ~CollectStatisticsUI();

private:
    static CollectStatisticsUI* collectStatisticsUI;
};

/*
 *  Class Name   : ExitUI
 *  Class Type   : Boundary
 *  Relationship : ExitUI IS-A UI
 *  Description  :
 *  Author       : ¿Ã∫¥«Â
 */

class ExitUI : public UI
{
public:
    static ExitUI* getUiInstance();
    
private:
    ExitUI();
    ~ExitUI();

private:
    static ExitUI* exitUI;
};



/* * * * * * * * * * * * * * * *
 *   Control Class Prototypes  *
 *                             *
 * * * * * * * * * * * * * * * */

/*
 *  Class Name   : Control
 *  Class Type   : Control
 *  Relationship : 
 *  Description  :
 */
class Control
{
public:
    virtual UI* getUI() = 0;
};

/*
 *  Class Name   : SignUp
 *  Class Type   : Control
 *  Relationship :
 *  Description  :
 *  Author       : ¿Ã∫¥«Â
 */

class SignUp : public Control
{
public:
    static SignUp* getControlInstance();
    virtual SignUpUI* getUI() override;

private:
    SignUp();
    ~SignUp();

private:
    static SignUp* signUp;
    SignUpUI* signUpUI;
};

/*
 *  Class Name   : DropOut
 *  Class Type   : Control
 *  Relationship :
 *  Description  :
 *  Author       : ¿Ã∫¥«Â
 */

class DropOut : public Control
{
public:
    static DropOut* getControlInstance();
    virtual DropOutUI* getUI() override;

private:
    DropOut();
    ~DropOut();

private:
    static DropOut* dropOut;
    DropOutUI* dropOutUI;
};

/*
 *  Class Name   : Login
 *  Class Type   : Control
 *  Relationship :
 *  Description  :
 *  Author       : ¿Ã∫¥«Â
 */

class Login : public Control
{
public:
    static Login* getControlInstance();
    virtual LoginUI* getUI() override;

private:
    Login();
    ~Login();

private:
    static Login* login;
    LoginUI* loginUI;
};

/*
 *  Class Name   : Logout
 *  Class Type   : Control
 *  Relationship :
 *  Description  :
 *  Author       : ¿Ã∫¥«Â
 */

class Logout : public Control
{
public:
    static Logout* getControlInstance();
    virtual LogoutUI* getUI() override;

private:
    Logout();
    ~Logout();

private:
    static Logout* logout;
    LogoutUI* logoutUI;
};

/*
 *  Class Name   : Enroll
 *  Class Type   : Control
 *  Relationship :
 *  Description  :
 *  Author       : ¿Ã∫¥«Â
 */

class Enroll : public Control
{
public:
    static Enroll* getControlInstance();
    virtual EnrollUI* getUI() override;

private:
    Enroll();
    ~Enroll();

private:
    static Enroll* enroll;
    EnrollUI* enrollUI;
};

/*
 *  Class Name   : ListOnSale
 *  Class Type   : Control
 *  Relationship :
 *  Description  :
 *  Author       : ¿Ã∫¥«Â
 */

class ListOnSale : public Control
{
public:
    static ListOnSale* getControlInstance();
    virtual ListOnSaleUI* getUI() override;

private:
    ListOnSale();
    ~ListOnSale();

private:
    static ListOnSale* listOnSale;
    ListOnSaleUI* listOnSaleUI;
};

/*
 *  Class Name   : ListSoldOut
 *  Class Type   : Control
 *  Relationship :
 *  Description  :
 *  Author       : ¿Ã∫¥«Â
 */

class ListSoldOut : public Control
{
public:
    static ListSoldOut* getControlInstance();
    virtual ListSoldOutUI* getUI() override;

private:
    ListSoldOut();
    ~ListSoldOut();

private:
    static ListSoldOut* listSoldOut;
    ListSoldOutUI* listSoldOutUI;
};

/*
 *  Class Name   : SearchOnSale
 *  Class Type   : Control
 *  Relationship :
 *  Description  :
 *  Author       : ¿Ã∫¥«Â
 */

class SearchOnSale : public Control
{
public:
    static SearchOnSale* getControlInstance();
    virtual SearchOnSaleUI* getUI() override;
    static Product* getFocusOn();
    static void setFocusOn(Product* focusOnProduct);

private:
    SearchOnSale();
    ~SearchOnSale();

private:
    static SearchOnSale* searchOnSale;
    static Product* focusOn;
    SearchOnSaleUI* searchOnSaleUI;
};

/*
 *  Class Name   : Purchase
 *  Class Type   : Control
 *  Relationship :
 *  Description  :
 *  Author       : ¿Ã∫¥«Â
 */

class Purchase : public Control
{
public:
    static Purchase* getControlInstance();
    virtual PurchaseUI* getUI() override;

private:
    Purchase();
    ~Purchase();

private:
    static Purchase* purchase;
    PurchaseUI* purchaseUI;
};

/*
 *  Class Name   : ListPurchaseHistory
 *  Class Type   : Control
 *  Relationship :
 *  Description  :
 *  Author       : ¿Ã∫¥«Â
 */

class ListPurchaseHistory : public Control
{
public:
    static ListPurchaseHistory* getControlInstance();
    virtual ListPurchaseHistoryUI* getUI() override;

private:
    ListPurchaseHistory();
    ~ListPurchaseHistory();

private:
    static ListPurchaseHistory* listPurchaseHistory;
    ListPurchaseHistoryUI* listPurchaseHistoryUI;
};

/*
 *  Class Name   : Rate
 *  Class Type   : Control
 *  Relationship :
 *  Description  :
 *  Author       : ¿Ã∫¥«Â
 */

class Rate : public Control
{
public:
    static Rate* getControlInstance();
    virtual RateUI* getUI() override;

private:
    Rate();
    ~Rate();

private:
    static Rate* rate;
    RateUI* rateUI;
};

/*
 *  Class Name   : CollectStatistics
 *  Class Type   : Control
 *  Relationship :
 *  Description  :
 *  Author       : ¿Ã∫¥«Â
 */

class CollectStatistics : public Control
{
public:
    static CollectStatistics* getControlInstance();
    virtual CollectStatisticsUI* getUI() override;

private:
    CollectStatistics();
    ~CollectStatistics();

private:
    static CollectStatistics* collectStatistics;
    CollectStatisticsUI* collectStatisticsUI;
};

/*
 *  Class Name   : Exit
 *  Class Type   : Control
 *  Relationship :
 *  Description  : 
 *  Author       : ¿Ã∫¥«Â
 */

class Exit : public Control
{
public:
    static Exit* getControlInstance();
    virtual ExitUI* getUI() override;

private:
    Exit();
    ~Exit();

private:
    static Exit* exit;
    ExitUI* exitUI;
};



/* * * * * * * * * * * * * * * *
 *   Entity Class Prototypes   *
 *                             *
 * * * * * * * * * * * * * * * */

/*
 *  Class Name   : Admin
 *  Class Type   : Entity
 *  Relationship : 
 *  Description  : Admin ≈¨∑°Ω∫¿« ∏‚πˆ ∫Øºˆ π◊ «‘ºˆ º±æ
 *  Author       : ¿Ã∫¥«Â
 */

 /*
 *   Revisions :
 *       1. Who : ≥Î¡ˆºÆ
 *          What : added Comments
 */

class Admin
{
public:
    bool addMember(string name, string SSN, string ID, string password); // »∏ø¯∞°¿‘µ» ªÛ≈¬ »Æ¿Œ
    string deleteMember();                                               // »∏ø¯≈ª≈
    bool login(string ID, string password);                              // ∑Œ±◊¿Œ«— ªÛ≈¬ »Æ¿Œ
    string logout();                                                     // ∑Œ±◊æ∆øÙ
    Member* findMember(string ID);                                       // »∏ø¯∏ÆΩ∫∆Æø°º≠ »∏ø¯ √£±‚

public:
    void addProduct(Product* newProduct);       // ªÛ«∞ µÓ∑œ
    Product* searchProduct(string productName); // ªÛ«∞ ∞Àªˆ

public:
    static Admin* getAdminInstance(); // 
    static string getLoginID();       // ∑Œ±◊¿Œ ID ∫“∑Øø¿±‚

private:
    Admin();
    ~Admin();

private:
    static Admin* admin;                    // ∞¸∏Æ¿⁄
    static string loginID;                  // «ˆ¿Á ∑Œ±◊¿Œ¡ﬂ¿Œ »∏ø¯¿« ID
    
    Member* memberList[MAX_ALL_MEMBERS];    // ¿¸√º »∏ø¯ ∏ÆΩ∫∆Æ
    int members;                            // ¿¸√º »∏ø¯ºˆ

    Product* productList[MAX_ALL_PRODUCTS]; // ¿¸√º ªÛ«∞ ∏ÆΩ∫∆Æ (∆«∏≈¡ﬂ ªÛ«∞ + ∆«∏≈øœ∑· ªÛ«∞)
    int products;                           // ¿¸√º ªÛ«∞ºˆ (∆«∏≈¡ﬂ ªÛ«∞ + ∆«∏≈øœ∑· ªÛ«∞)
    
};

/*
 *  Class Name   : Member
 *  Class Type   : Entity
 *  Relationship : Member IS-A Seller
 *                 Member IS-A Buyer
 *  Description  : Member ≈¨∑°Ω∫¿« ∏‚πˆ ∫Øºˆ π◊ «‘ºˆ º±æ
 *  Author       : ¿Ã∫¥«Â
 */

 /*
 *   Revisions :
 *       1. Who : ≥Î¡ˆºÆ
 *          What : added Comments
 */

class Member
{
// Use Case Functions
public:
    bool sale(string productName, string brand, int price, int qty); // ∆«∏≈ ¿«∑˘ µÓ∑œ
    string listOnSale();                                             // µÓ∑œ ªÛ«∞ ¡∂»∏
    string listSoldOut();                                            // ∆«∏≈ øœ∑· ªÛ«∞ ¡∂»∏
    Product* searchOnSale(string productName);                       // ªÛ«∞ ¡§∫∏ ∞Àªˆ
    bool purchase();                                                 // ªÛ«∞ ±∏∏≈
    string listPurchaseHistory();                                    // ªÛ«∞ ±∏∏≈ ≥ªø™ ¡∂»∏
    bool rate(string productName, int rating);                       // ªÛ«∞ ±∏∏≈ ∏∏¡∑µµ ∆Ú∞°
    string collectStatistics();                                      // ∆«∏≈ ªÛ«∞ ≈Î∞Ë

// get Functions
public:
    string getName();           // ¿Ã∏ß ∫“∑Øø¿±‚
    string getSSN();            // ¡÷πŒπ¯»£ ∫“∑Øø¿±‚
    string getID();             // ID ∫“∑Øø¿±‚
    string getPassword();       // ∫Òπ–π¯»£ ∫“∑Øø¿±‚
    int getSaleProducts();      // ∆«∏≈¡ﬂ¿Œ ªÛ«∞ ∫“∑Øø¿±‚
    int getPurchasedProducts(); // ∆«∏≈øœ∑·µ» ªÛ«∞ ∫“∑Øø¿±‚

// Constructor and Destructor
public:
    Member(string name, string SSN, string ID, string password); // »∏ø¯ ¡§∫∏
    ~Member();

// »∏ø¯ ¿Œ¿˚ªÁ«◊
private:
    string name;     // »∏ø¯ º∫∏Ì
    string SSN;      // ¡÷πŒµÓ∑œπ¯»£ (Social Security Number)
    string ID;       // »∏ø¯ ID
    string password; // »∏ø¯ ∫Òπ–π¯»£

// »∏ø¯∫∞ ∆«∏≈°§±∏∏≈ ªÛ«∞ ≥ªø™
private:
    Product* saleList[MAX_PERSONAL_PRODUCTS];     // ∆«∏≈¡ﬂ°§∆«∏≈øœ∑· ªÛ«∞ ∏ÆΩ∫∆Æ
    int saleProducts;                             // ∞≥¿Œ∫∞ ∆«∏≈«— ªÛ«∞ ¡æ∑˘ ∞≥ºˆ

    Product* purchaseList[MAX_PERSONAL_PRODUCTS]; // ±∏∏≈ ªÛ«∞ ∏ÆΩ∫∆Æ
    int purchasedProducts;                        // ∞≥¿Œ∫∞ ±∏∏≈«— ªÛ«∞ ¡æ∑˘ ∞≥ºˆ
};

/*
 *  Class Name   : Product
 *  Class Type   : Entity
 *  Relationship : Admin  HAS-A Product
 *                 Member HAS-A Product
 *  Description  : Product ≈¨∑°Ω∫¿« ∏‚πˆ ∫Øºˆ π◊ «‘ºˆµÈ º±æ
 *  Author       : ¿Ã∫¥«Â
 */

/*
*   Revisions :
*       1. Who : ≥Î¡ˆºÆ
*          What : added Comments
*/

class Product
{
public:
    int getProductID();         // ªÛ«∞ ID ∫“∑Øø¿±‚
    string getProductName();    // ªÛ«∞ ¿Ã∏ß ∫“∑Øø¿±‚
    string getBrand();          // ¡¶¿€»∏ªÁ∏Ì ∫“∑Øø¿±‚
    int getPrice();             // ∞°∞› ∫“∑Øø¿±‚
    int getOnSaleQty();         // ∆«∏≈¡ﬂ¿Œ ªÛ«∞¿« ≥≤¿∫ ºˆ∑Æ ∫“∑Øø¿±‚ 
    int getSoldOutQty();        // ∆«∏≈øœ∑·µ» ªÛ«∞¿« ∆«∏≈µ» ºˆ∑Æ ∫“∑Øø¿±‚
    string getSellerID();       // ∆«∏≈¿⁄ ID ∫“∑Øø¿±‚
    int getAvgRating();         // ∆Ú±’ ±∏∏≈∏∏¡∑µµ ∫“∑Øø¿±‚

    void setPurchase();         // '∆«∏≈¡ﬂ' ªÛ≈¬ º≥¡§
    void setSoldOut();          // '∆«∏≈øœ∑·' ªÛ≈¬ º≥¡§
    void setRating(int rating); // ±∏∏≈ ∏∏¡∑µµ ∆Ú∞°(¡°ºˆ)

    bool isOnSale();            // '∆«∏≈¡ﬂ' ªÛ≈¬ »Æ¿Œ
    bool isSoldOut();           // '∆«∏≈øœ∑·' ªÛ≈¬ »Æ¿Œ

public:
    Product(string productName, string brand, int price, int qty, string sellerID); // ªÛ«∞ ªÛºº ¡§∫∏
    ~Product();

private:
    static int productSN;                   // ªÛ«∞ Ω√∏ÆæÛ π¯»£

private:
    int productID;                          // ªÛ«∞ ID
    string productName;                     // ªÛ«∞ ¿Ã∏ß
    string brand;                           // ¡¶¿€»∏ªÁ∏Ì
    int price;                              // ∞°∞›
    int onSaleQty;                          // ∆«∏≈¡ﬂ¿Œ ªÛ«∞¿« ≥≤¿∫ ºˆ∑Æ
    int soldOutQty;                         // ∆«∏≈ øœ∑·µ» ªÛ«∞¿« ∆«∏≈µ» ºˆ∑Æ
    string sellerID;                        // ∆«∏≈¿⁄ ID
    int ratings[MAX_PERSONAL_PRODUCTS];     // ∆Ú¡°
    int avgRating;                          // ∆Ú±’ ±∏∏≈ ∏∏¡∑µµ
    bool onSale;                            // '∆«∏≈¡ﬂ', '∆«∏≈øœ∑·' ªÛ≈¬ ∆«∫∞ ∫Øºˆ
};